1	线程间通信
1.1	等待/通知(wait()/notify())机制
等待/通知机制就是，某个线程在执行的过程中等待另外一个线程通知它，它获取到通知后就会继续执行。最典型的就是就餐问题，送餐员必须等待厨师通知他可以取餐的时候，他才可以去取餐，否则他只能一直在等待。
wait()/notify()必须在synchronized修饰的方法或者代码中调用，也就是说，必须得有锁对象才能正常使用，否则就会报IllegalMonitorStateException。
示例：
/**
 * 等待通知代码测试类
 */
// 创建Thread09.java
public class Thread09 {
    public static void main(String[] args) {
        Object obj = new Object();
        Thread T1 = new Thread(() -> {
            System.out.println("T1 start");
            synchronized (obj) {
                try {
                    obj.wait();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            System.out.println("T1 end");
        });
        T1.start();

        Thread T2 = new Thread(() -> {
            System.out.println("T2 start");
            synchronized (obj) {
                for (int i = 0; i < 5; i++) {
                    System.out.println(i);
                }
                obj.notify();
            }
            System.out.println("T2 end");
        });
        T2.start();
    }
}
T1线程启动后打印了“T1 start”后调用了wait()方法，进入等待队列，T2线程启动后，调用了notify()方法唤醒了T1线程，使得T1线程继续执行，打印了“T1 end”这句话。这就是wait()/notify()最基础的用法。
wait()执行后会立即释放锁，notify()执行后不立即释放锁，必须等待同步方法或者同步代码块里面的代码执行完才会释放锁。
/**
 * wait()/notify()执行后所释放时间验证类
 */
public class Thread10 {
    public static void main(String[] args) {
        Object lock = new Object();
        ThreadA10 threadA10 = new ThreadA10();
        new Thread(() -> {
            synchronized (lock) {
                Thread.currentThread().setName("T1");
                try {
                    lock.wait();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                threadA10.printString();
            }
        }).start();

        new Thread(() -> {
            synchronized (lock) {
                Thread.currentThread().setName("T2");
                threadA10.printString();
                lock.notify();
                for (int i = 0; i < 10; i++) {
                    System.out.println(i);
                }
            }
        }).start();
    }
}

class ThreadA10 {
    public void printString () {
        System.out.println(Thread.currentThread().getName());
    }
}
T1线程和T2线程都是用了同一把lock锁，T1线程启动后打印了“T1”后调用了wait()方法，进入等待队列，T2线程启动后，立马打印了“T2”,说明T1线程立马释放了锁被T2线程获得了lock锁。T2调用了notify()方法唤醒了T1线程，但是T1线程并没有立马，而是等到T2线程执行完后边的代码后，T1线程才继续执行，打印了“T1”这句话。这就说明wait()执行后会立即释放锁，notify()执行后不立即释放锁，必须等待同步方法或者同步代码块里面的代码执行完才会释放锁。
1.1.1	等待通知的经典案例-生产者/消费者模式
生产者/消费者模式指的是，生产者生产好数据后通知消费者消费数据，而消费者消费完数据后，又通知生产者生产数据，这是一个往返循环的过程。生产者/消费者模式在处理过程中也是使用的wait()/notify()机制，但是这中机制可能会造成一种假死的现象。下边模拟这中情况。
实例：
/**
 * 生产者/消费者模式(wait()/notify())执行后出现假死现象验证类
 */
public class Thread11 {
    public static void main(String[] args) throws InterruptedException {
        Object lock = new Object();
        P p = new P(lock);
        C c = new C(lock);
        for (int i = 0; i < 2; i++) {
            ThreadA11 threadA11 = new ThreadA11(p);
            ThreadB11 threadB11 = new ThreadB11(c);
            threadA11.setName("P" + i);
            threadB11.setName("C" + i);
            threadA11.start();
            threadB11.start();
        }
        Thread.sleep(500);
        Thread[] threads = new Thread[Thread.currentThread().getThreadGroup().activeCount()];
        Thread.currentThread().getThreadGroup().enumerate(threads);
        for (int i = 0; i < threads.length; i++) {
            System.out.println(threads[i].getName() + " " + threads[i].getState());
        }
    }
}

class ValueObject {
    public static volatile String value = "";
}

// 生产者
class P {
    private Object lock;

    public P(Object lock) {
        this.lock = lock;
    }

    public void product() {
        synchronized (lock) {
            while (!"".equals(ValueObject.value)) {
                try {
                    System.out.println("生产者 " + Thread.currentThread().getName() + " WAITING了");
                    lock.wait();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            ValueObject.value = "" + System.currentTimeMillis();
            System.out.println("生产者 " + Thread.currentThread().getName() + " RUNNAVBLE了");
            lock.notify();
        }
    }
}

// 消费者
class C {
    private Object lock;

    public C(Object lock) {
        this.lock = lock;
    }

    public void consume() {
        synchronized (lock) {
            while ("".equals(ValueObject.value)) {
                try {
                    System.out.println("消费者 " + Thread.currentThread().getName() + " WAITING了");
                    lock.wait();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            ValueObject.value = "";
            System.out.println("消费者 " + Thread.currentThread().getName() + " RUNNAVBLE了");
            lock.notify();
        }
    }
}

class ThreadA11 extends Thread {
    private P p;

    public ThreadA11(P p) {
        this.p = p;
    }

    @Override
    public void run() {
        while (true) {
            p.product();
        }
    }
}

class ThreadB11 extends Thread {
    private C c;

    public ThreadB11(C c) {
        this.c = c;
    }

    @Override
    public void run() {
        while (true) {
            c.consume();
        }
    }
}
 
从结果可以看出，所有的生产者/消费者线程都成WAITING状态了，而程序还是运行状态，线程出现假死状态，出现假死状态的可能原因是：notify()是随机唤醒一个等待的线程，有可能是“生态者”唤醒“生态者”或者是“消费者”唤醒“消费者”，不停的这样操作，导致最后所有的线程都成WAITING状态，出现假死装状态。从结果继续分析出现假死的步骤：
（1）	P0生产完数据，发出通知，并释放了锁。
（2）	P0再次进入while循环，发现数据还未被消费，故P0进入WAITTING状态。
（3）	C0消费了数据，发出通知并释放了锁。
（4）	C0再次进入while循环，发现数据已经被消费，故C0进入WAITTING状态并释放了锁。
（5）	C1获得了锁，但是发现数据已经被消费，故C1进入WAITTING状态并释放了锁。
（6）	P1生产完数据，发出通知并释放了锁。
（7）	P1再次进入while循环，发现数据还未被消费，故P1进入WAITTING状态并释放了锁。
（8）	C0接收到了通知（第6步发出的通知，生产者P1唤醒了消费者C0），消费了数据，发出通知并释放了锁。
（9）	C0再次进入while循环，发现数据已经被消费，故C0再次进入WAITTING状态并释放了锁。
（10）	C1接收到了通知（第8步发出的通知，消费者C0唤醒了消费者C1），但是发现数据已经被消费，故C1进入WAITTING状态并释放了锁。
（11）	P0接收到了通知（第8步发出的通知，消费者C0唤醒了消费者C1），生产完数据，发出通知并释放了锁。
（12）	P0再次进入while循环，发现数据未被消费，故P0再次进入WAITTING状态并释放了锁。
（13）	P1接收到了通知，发现数据未被消费，故P1再次进入WAITTING状态并释放了锁。
从上边的分析可以看出，假死的原因就是因为因为不断的唤醒了同类，解决的办法就是将lock.notify()换成lock.notifyAll()。每次唤醒的线程的时候，将所有的等待的线程全部唤醒。将lock.notify()换成lock.notifyAll()后，会发现程序将会不停的执行下去。
1.1.2	使用管道进行通信
管道（pipeStream）是是一种特殊的输入/输出流，用于不同线程间传输数据，一个线程发送数据到输出管道中，另外一个线程从输入管道中获取数据。
JAVA提供了四个类来实现管道通信：
	字符流管道：PipedWriter、PipedRead
	字节流管道：PipedOutputStream、PipedInputStream
/**
 * 线程间管道通信测试类
 * 1、字节流方式
 * 2、字符流方式
 */
public class Thread12 {
    public static void main(String[] args) throws InterruptedException {
        // 管道：字节流方式
        PipedInputStream inputStream = new PipedInputStream();
        PipedOutputStream outputStream = new PipedOutputStream();

        // 管道：字符流方式
        PipedWriter pipedWriter = new PipedWriter();
        PipedReader pipedReader = new PipedReader();

        try {
            pipedWriter.connect(pipedReader);
            // pipedReader.connect(pipedWriter);

            inputStream.connect(outputStream);
            // outputStream.connect(inputStream);
        } catch (IOException e) {
            e.printStackTrace();
        }
        PipelineReadData pipelineReadData = new PipelineReadData();
        new Thread(() -> pipelineReadData.readData(inputStream)).start();
        new Thread(() -> pipelineReadData.readData(pipedReader)).start();
        Thread.sleep(500);
        PipelineWriteData pipelineWriteData = new PipelineWriteData();
        new Thread(() -> pipelineWriteData.writeData(outputStream)).start();
        new Thread(() -> pipelineWriteData.writeData(pipedWriter)).start();
    }
}

class PipelineReadData {
    public void readData (PipedInputStream inputData) {
        try {
            byte[] bytes = new byte[1024];
            int dataLength = inputData.read(bytes);
            System.out.println("readData read (字节流方式):");
            while (-1 != dataLength) {
                System.out.println(new String(bytes, 0, dataLength));
                dataLength = inputData.read(bytes);
            }
            inputData.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void readData (PipedReader inputData) {
        try {
            char[] chars = new char[1024];
            int dataLength = inputData.read(chars);
            System.out.println("readData read (字符流方式):");
            while (-1 != dataLength) {
                System.out.println(new String(chars, 0, dataLength));
                dataLength = inputData.read(chars);
            }
            inputData.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

class PipelineWriteData {
    public void writeData (PipedOutputStream outputData) {
        try {
            System.out.println("writeData write (字节流方式):");
            System.out.println("hello word!");
            outputData.write("hello word!".getBytes());
            outputData.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void writeData (PipedWriter outputData) {
        try {
            System.out.println("writeData write (字符流方式):");
            System.out.println("hello word!");
            outputData.write("hello word!");
            outputData.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

1.1.3	等待/通知通信模式实战
使用等待/通知模式实现交叉备份数据的需求。
/**
 * 等待/通知m模式实战：交叉备份数据
 * 要求：起10个线程，5个线程备份数据到数据库A,5个线程备份数据到数据库B
 *      并且要求线程交叉执行
 */
public class Thread13 {
    public static void main(String[] args) {
        BckDada bckDada = new BckDada();
        for (int i = 0; i < 5; i++) {
            new Thread(() -> {
                try {
                    bckDada.BckDadaA();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }).start();

            new Thread(() -> {
                try {
                    bckDada.BckDadaB();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }).start();
        }
    }
}

class BckDada {
    private volatile boolean isStartBckA = false;

    public synchronized void BckDadaA () throws InterruptedException {
        while (isStartBckA) {
            this.wait();
        }
        System.out.println("######");
        isStartBckA = true;
        this.notifyAll();
    }

    public synchronized void BckDadaB () throws InterruptedException {
        while (!isStartBckA) {
            this.wait();
        }
        System.out.println("&&&&&&");
        isStartBckA = false;
        this.notifyAll();
    }
}
1.2	使用join()方法
如果一个线程需要等待另外一个线程运行完毕后采取执行，那么就得使用join()方法，join()方法的意思就是把A线程加入到B线程的内部，相当于将A线程变成了B线程的子线程，那么此时B线程就必须等待A线程执行完才能执行后边的代码，此时B线程是就可以使用A线程执行完的数据。总之：
	join()方法有使线程排队的作用，类似于synchronized达到同步执行的效果，只是join()底层是wait()实现，synchronized底层是使用监视器实现。
	join()方法可以完成线程间数据的可见性。
	join(long)方法底层使用wait(long)方法实现，具有是线程等待一段时间的作用，sleep(long)也能达到这个效果，只是join(long)执行后会释放锁，而sleep(long)不会释放锁。
	join()方法执行完后，具有释放锁的特点。
/**
 * Thread.join()方法测试类
 */
public class Thread14 {
    public static void main(String[] args) {

        Thread t1 = new Thread(() ->{
            System.out.println("T1 start");
        }, "T1");

        Thread t2 = new Thread(() ->{
            try {
                t1.join(1000); // 这段代码可以保证先打印T1 start后打印T2 start
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("T2 start");
        }, "T2");

        t2.start();
        t1.start();
    }
}
注意：使用join()方法可能会导致join()之后的代码先运行（出现意外的情况下，）。
1.3	ThreadLocal的使用
1.3.1	ThreadLocal具有线程隔离性
如果多个线程都往同一个public static的ThreadLocal的变量中存储数据，那么对应的线程的数据是和线程本身挂钩的，也就是在A线程中不会获取到B线程的数据，在B线程中不会获取到A线程的数据。如下验证：
实例：
/**
 * ThreadLocal的数据隔离性验证
 */
public class Thread15 {
    public static void main(String[] args) {
        CommData.local.set("main set value");
        Thread t1 = new Thread(() -> {
            CommData.local.set("T1 set value");
            System.out.println("T1 get value" + CommData.local.get());
        }, "T1");
        Thread t2 = new Thread(() -> {
            CommData.local.set("T2 set value");
            System.out.println("T2 get value" + CommData.local.get());
        }, "T2");
        t1.start();
        t2.start();
        System.out.println("main get value" + CommData.local.get());
    }
}

class CommData {
    public static ThreadLocal<String> local = new ThreadLocal<>();
}
从结果中可以看出，在当前线程中使用CommData.local.get()只能获取当前线程存储的内存，其他线程存储的线程对于当前线程是不可见的。
1.3.2	InheritableThreadLocal的数据继承性验证
	InheritableThreadLocal可以调用initialValue()设置初始值，就算没有set,也不会获取到null。
	InheritableThreadLocal在父线程设置的值，可以继承到子线程中使用，但是在子线程设置的值，不会传递到父线程，父线程依旧取得值是旧值。
/**
 * InheritableThreadLocal的数据继承性验证
 * 1、InheritableThreadLocal可以调用initialValue()设置初始值，就算没有set,也不会获取到null
 * 2、InheritableThreadLocal在父线程设置的值，可以继承到子线程中使用，但是在子线程设置的值，不会传递到父线程，
 *   父线程依旧取得值是旧值
 */
public class Thread16 {
    public static void main(String[] args) {
        CommData16 commData16 = new CommData16();
        // commData16.set("main set value");
        Thread t1 = new Thread(() -> {
            commData16.set("T1 set value");
            System.out.println("T1 get value " + commData16.get());
        }, "T1");
        Thread t2 = new Thread(() -> {
            System.out.println("T2 get value " + commData16.get());
        }, "T2");
        t1.start();
        t2.start();
        System.out.println("main get value " + commData16.get());
    }
}

class CommData16 extends InheritableThreadLocal {
    @Override
    protected Object initialValue() {
        return new Date().getTime();
    }

    @Override
    protected Object childValue(Object parentValue) {
        return parentValue + " child set value……";
    }
}

2	锁的使用
2.1	ReentrantLock锁(可重入锁)
ReentrantLock锁可以达到和synchronized同样的效果，甚至能比synchronized更加灵活。ReentrantLock锁使用lock()和unlock()解锁和释放锁。
2.1.1	PeentrantLock锁中的公平锁和非公平锁
PeentrantLock锁分公平锁和非公平锁，提供两个构造函数：new PeentrantLock()的时候默认是非公平锁，new PeentrantLock(boolean fair)的时候，接受一个boolean值来指定。
示例：
/**
 * ReentrantLock（可重入锁）加锁保证线程之间顺序执行
 *
 *                 ReentrantLock内部类抽象类Sync
 *                          -
 *                          -
 *  ReentrantLock      Sync继承于AQS     Sync的实现类NonfairSync
 *    lock() -----调用----> lock() --------->  lock()
 */
public class Thread17 {
    //private static final ReentrantLock lock = new ReentrantLock();
    private static final ReentrantLock lock = new ReentrantLock(true);

    public static void main(String[] args) throws InterruptedException {
        for (int i = 0; i < 100; i++) {
            new Thread(Thread17::printString, "A" + i).start();
        }
    }

    public static void printString() {
        try {
            lock.lock();
            System.out.println(Thread.currentThread().getName() + "被执行了");
        } finally {
            lock.unlock();
        }
    }
}
非公平锁：创建非公平锁new ReentrantLock()后，加上lock.lock()和lock.unlock()方法后依旧是乱序打印，这说明非公平锁并不是按照执行启动顺序来获取锁的，先启动的并不一定会先获得锁。
公平锁：创建公平锁new ReentrantLock(true)后，加上lock.lock()和lock.unlock()方法后基本上呈现有序打印，这说明公平锁在一定程度上可以保证，先到的定会先获得锁。



2.1.2	PeentrantLock中的Condition
使用Condition可以实现等待/通知模式。利用Condition可以实现顺序打印。
示例：
/**
 * Condition实现等待/通知模式
 * 1、使用Condition实现将业务排序规划
 */
public class Thread18 {
    public static volatile int nextPrint = 1;
    public static void main(String[] args) throws InterruptedException {
        ThreadA18 threadA18 = new ThreadA18();
        for (int i = 0; i < 5; i++) {
            new Thread(() -> threadA18.aPrintString(nextPrint), "A").start();
            new Thread(() -> threadA18.bPrintString(nextPrint), "B").start();
            new Thread(() -> threadA18.cPrintString(nextPrint), "C").start();
        }
    }
}

class ThreadA18 {
    private static final ReentrantLock lock = new ReentrantLock();
    private static final Condition conditionA = lock.newCondition();
    private static final Condition conditionB = lock.newCondition();
    private static final Condition conditionC = lock.newCondition();
    public void aPrintString(int nextPrint) {
        try {
            lock.lock();
            if (nextPrint != 1) {
                conditionA.await();
            }
            for (int i = 0; i < 3; i++) {
                System.out.println(Thread.currentThread().getName() + " " + i);
            }
            Thread18.nextPrint = 2;
            conditionB.signal();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
        }
    }

    public void bPrintString(int nextPrint) {
        try {
            lock.lock();
            if (nextPrint != 2) {
                conditionB.await();
            }
            for (int i = 0; i < 3; i++) {
                System.out.println(Thread.currentThread().getName() + " " + i);
            }
            Thread18.nextPrint = 3;
            conditionC.signal();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
        }
    }

    public void cPrintString(int nextPrint) {
        try {
            lock.lock();
            if (nextPrint != 3) {
                conditionC.await();
            }
            for (int i = 0; i < 3; i++) {
                System.out.println(Thread.currentThread().getName() + " " + i);
            }
            Thread18.nextPrint = 1;
            conditionA.signal();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally {
            lock.unlock();
        }
    }
}
2.2	
